{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "#import library\n",
    "import numpy as np\n",
    "from sklearn.datasets import load_svmlight_file\n",
    "%pylab inline\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#upload file\n",
    "X, Y = load_svmlight_file('C:\\\\Users\\\\dell\\\\Desktop\\\\housing_scale.txt')\n",
    "#X = X.reshape(X.shape[1:])\n",
    "#X,Y = np.arange(10).reshape((5, 2)), range(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#training and validation data\n",
    "X_train,X_valid, Y_train, Y_valid =train_test_split(X,Y,test_size = 0.4, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#regression\n",
    "from sklearn.linear_model import LinearRegression\n",
    "rf = LinearRegression()\n",
    "rf.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2.92458626,   3.08383266,   1.62225602,   2.20939599,\n",
       "        -3.24338766,   9.02809163,  -0.34256211,  -6.0944311 ,\n",
       "         2.0089726 ,  -3.53229782,  -5.20273978,   0.12538165,\n",
       "       -10.18018967])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print array coeficients\n",
    "rf.coef_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.23888415420758707"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#random init\n",
    "import numpy as np\n",
    "np.random.randn()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#zero init\n",
    "#zero_vector =np.zeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'zero_vector' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-dc2267840b33>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mzero_vector\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'zero_vector' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-579.9066881746049\n"
     ]
    }
   ],
   "source": [
    "loss=np.mean((rf.predict(X_train)-(Y_train)**2))\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from numpy import array, dot, transpose\n",
    "from numpy.linalg import inv\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y = load_svmlight_file('C:\\\\Users\\\\dell\\\\Desktop\\\\housing_scale.txt')\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y.shape=(Y.shape[0], 1)\n",
    "t1=X.transpose().dot(X)\n",
    "t2=t1.toarray()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=X.toarray()\n",
    "\n",
    "w=np.linalg.inv(t2).dot(X.transpose()).dot(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_new, X_val_new, y_train_new,y_val_new =  train_test_split(X_train, Y_train, test_size=0.2, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = Y_train.reshape(1, -1)\n",
    "y_predict = rf.predict(X_train)\n",
    "loss_train = np.sum((Y_train-y_predict)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "y_pred = rf.predict(X_valid)\n",
    "loss_val = np.sum((Y_valid-y_pred)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6642.4485477053095\n",
      "5898.041347471441\n"
     ]
    }
   ],
   "source": [
    "print(loss_train)\n",
    "print(loss_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#linear regression and stochastic gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "#import librairie\n",
    "import numpy as np\n",
    "from sklearn.datasets import load_svmlight_file\n",
    "%pylab inline\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load file\n",
    "x, y = load_svmlight_file('C:\\\\Users\\\\dell\\\\Desktop\\\\housing_scale.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#training data\n",
    "x_train, x_val, y_train, y_val =train_test_split(x,y,test_size = 0.4, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loss funtion\n",
    "y_pred = rf.predict(x_train)\n",
    "loss_G = 1/2*sum((y_train-y_pred)**2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#derivation\n",
    "y.shape=(y.shape[0], 1)\n",
    "t1=x.transpose().dot(x)\n",
    "t2=t1.toarray()\n",
    "x=x.toarray()\n",
    "\n",
    "W= -np.linalg.inv(t2).dot(x.transpose()).dot(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate G\n",
    "G=np.dot(x.transpose(),loss_G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#opposite direction of gradient descent\n",
    "D = -G\n",
    "#update model\n",
    "eta =0.0001\n",
    "W=W+eta*D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loss_train\n",
    "loss_trn = np.sum((y_train-y_pred)**2)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predd = rf.predict(x_val)\n",
    "loss_va = np.sum((y_val-y_predd)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = [1,2,3,4,5]\n",
    "len(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n",
      "6642.4485477053095\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(x)):\n",
    "    G=np.dot(x.transpose(),loss_G)\n",
    "    D = -G\n",
    "    #update model\n",
    "    eta =0.0001\n",
    "    W=W+eta*D\n",
    "    \n",
    "    loss_trn = np.sum((y_train-y_pred)**2)\n",
    "    print(loss_trn)\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
